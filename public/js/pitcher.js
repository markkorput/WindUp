// Generated by CoffeeScript 1.6.3
(function() {
  var makeDistortionCurve;

  makeDistortionCurve = function(amount) {
    var curve, deg, i, k, n_samples, x, _i, _ref;
    k = (_ref = typeof amount === 'number') != null ? _ref : {
      amount: 50
    };
    n_samples = 44100;
    curve = new Float32Array(n_samples);
    deg = Math.PI / 180;
    i = 0;
    for (i = _i = 0; 0 <= n_samples ? _i <= n_samples : _i >= n_samples; i = 0 <= n_samples ? ++_i : --_i) {
      x = i * 2 / n_samples - 1;
      curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
    }
    return curve;
  };

  this.Pitcher = (function() {
    function Pitcher(opts) {
      var bufferLoader,
        _this = this;
      this.options = opts || {};
      this.track_url = 'audio/harmonic-drone-small.wav';
      this.volume = 0.4;
      this.freq = 700;
      this.gainMultiplier = 1.0;
      if (typeof webkitAudioContext !== "undefined") {
        this.context = new webkitAudioContext();
      } else if (typeof AudioContent !== "undefined") {
        this.context = new AudioContext();
      } else {
        console.log("AudioContext not supported");
        return;
      }
      this.gain = this.context.createGain();
      this.gain.gain.value = this.volume * this.gainMultiplier;
      this.gain.connect(this.context.destination);
      this.filter = this.context.createBiquadFilter();
      this.filter.connect(this.gain);
      this.filter.type = this.filter.LOWPASS;
      this.filter.frequency.value = 5000;
      this.filter.Q.value = 15;
      this.distortion = this.context.createWaveShaper();
      this.distortion.curve = makeDistortionCurve(400);
      this.distortion.oversample = '4x';
      this.distortion.connect(this.filter);
      bufferLoader = new BufferLoader(this.context, [this.track_url], function(bufferList) {
        return _this.bufferList = bufferList;
      });
      bufferLoader.load();
    }

    Pitcher.prototype.apply = function(value) {
      var maxValue, minValue, multiplier, numberOfOctaves;
      this.freq = 300 + 1600 * value;
      minValue = 40;
      maxValue = this.context.sampleRate / 2;
      numberOfOctaves = Math.log(maxValue / minValue) / Math.LN2;
      multiplier = Math.pow(2, numberOfOctaves * (value - 1.0));
      this.filter.frequency.value = maxValue * multiplier;
      if (this.filter) {
        this.filter.frequency.value = this.freq;
      }
      return this.source.playbackRate.value = 1 + value;
    };

    Pitcher.prototype.start = function() {
      var buffer, _i, _len, _ref, _results;
      if (!this.context) {
        return;
      }
      _ref = this.bufferList;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        buffer = _ref[_i];
        this.source = this.context.createBufferSource();
        this.source.buffer = buffer;
        this.source.loop = true;
        this.source.connect(this.filter);
        console.log(this.source);
        if (this.source) {
          _results.push(this.source.start(this.context.currentTime));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Pitcher.prototype.stop = function() {
      if (this.oscillator) {
        this.oscillator.stop(this.context.currentTime);
        this.oscillator = void 0;
      }
      if (this.source) {
        return this.source.stop(this.context.currentTime);
      }
    };

    Pitcher.prototype.toggle = function() {
      if (this.oscillator) {
        return this.stop();
      } else {
        return this.start();
      }
    };

    Pitcher.prototype.setVolume = function(vol) {
      this.volume = vol;
      if (this.gain) {
        return this.gain.gain.value = vol * (1.0 - this.fade);
      }
    };

    Pitcher.prototype.setGain = function(g) {
      this.gainMultiplier = Math.max(Math.min(g, 1.0), 0.0);
      if (this.gain) {
        return this.gain.gain.value = this.volume * this.gainMultiplier;
      }
    };

    return Pitcher;

  })();

}).call(this);
