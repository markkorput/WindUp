// Generated by CoffeeScript 1.6.3
(function() {
  this.Pitcher = (function() {
    function Pitcher(opts) {
      var bufferLoader,
        _this = this;
      this.options = opts || {};
      this.track_url = 'audio/jam.wav';
      this.volume = 0.4;
      this.freq = 700;
      this.gainMultiplier = 1.0;
      if (typeof webkitAudioContext !== "undefined") {
        this.context = new webkitAudioContext();
      } else if (typeof AudioContent !== "undefined") {
        this.context = new AudioContext();
      } else {
        console.log("AudioContext not supported");
        return;
      }
      this.gain = this.context.createGain();
      this.gain.gain.value = this.volume * this.gainMultiplier;
      this.gain.connect(this.context.destination);
      this.filter = this.context.createBiquadFilter();
      this.filter.connect(this.gain);
      this.filter.type = 'lowpass';
      this.filter.frequency.value = 440;
      bufferLoader = new BufferLoader(this.context, [this.track_url], function(bufferList) {
        return _this.bufferList = bufferList;
      });
      bufferLoader.load();
      console.log(this.context);
      console.log(this.gain);
    }

    Pitcher.prototype.apply = function(value) {
      this.freq = 300 + 1600 * value;
      if (this.oscillator) {
        this.oscillator.frequency.value = this.freq;
      }
      if (this.filter) {
        return this.filter.frequency.value = this.freq;
      }
    };

    Pitcher.prototype.start = function() {
      var buffer, _i, _len, _ref, _results;
      if (!this.context) {
        return;
      }
      _ref = this.bufferList;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        buffer = _ref[_i];
        this.source = this.context.createBufferSource();
        this.source.buffer = buffer;
        this.source.loop = true;
        this.source.connect(this.filter);
        console.log(this.source);
        if (this.source) {
          _results.push(this.source.start(this.context.currentTime));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Pitcher.prototype.stop = function() {
      if (this.oscillator) {
        this.oscillator.stop(this.context.currentTime);
        this.oscillator = void 0;
      }
      if (this.source) {
        return this.source.stop(this.context.currentTime);
      }
    };

    Pitcher.prototype.toggle = function() {
      if (this.oscillator) {
        return this.stop();
      } else {
        return this.start();
      }
    };

    Pitcher.prototype.setVolume = function(vol) {
      this.volume = vol;
      if (this.gain) {
        return this.gain.gain.value = vol * (1.0 - this.fade);
      }
    };

    Pitcher.prototype.setGain = function(g) {
      this.gainMultiplier = Math.max(Math.min(g, 1.0), 0.0);
      if (this.gain) {
        return this.gain.gain.value = this.volume * this.gainMultiplier;
      }
    };

    return Pitcher;

  })();

}).call(this);
