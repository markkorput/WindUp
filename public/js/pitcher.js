// Generated by CoffeeScript 1.6.3
(function() {
  this.Pitcher = (function() {
    function Pitcher(opts) {
      var bufferLoader,
        _this = this;
      this.options = opts || {};
      this.track_url = 'audio/techno.wav';
      this.volume = 0.01;
      this.freq = 700;
      this.gainMultiplier = 1.0;
      if (typeof webkitAudioContext !== "undefined") {
        this.context = new webkitAudioContext();
      } else if (typeof AudioContent !== "undefined") {
        this.context = new AudioContext();
      } else {
        console.log("AudioContext not supported");
        return;
      }
      this.gain = this.context.createGain();
      this.gain.gain.value = this.volume * this.gainMultiplier;
      this.gain.connect(this.context.destination);
      this.filter = this.context.createBiquadFilter();
      this.filter.connect(this.gain);
      this.filter.type = 'lowpass';
      this.filter.frequency.value = 440;
      bufferLoader = new BufferLoader(this.context, [this.track_url], function(bufferList) {
        var buffer, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = bufferList.length; _i < _len; _i++) {
          buffer = bufferList[_i];
          _this.source = _this.context.createBufferSource();
          _this.source.buffer = buffer;
          _this.source.loop = true;
          _this.source.connect(_this.filter);
          _results.push(console.log(_this.source));
        }
        return _results;
      });
      bufferLoader.load();
      console.log(this.context);
      console.log(this.gain);
    }

    Pitcher.prototype.apply = function(value) {
      this.freq = 300 + 800 * value;
      if (this.oscillator) {
        this.oscillator.frequency.value = this.freq;
      }
      if (this.filter) {
        return this.filter.frequency.value = this.freq;
      }
    };

    Pitcher.prototype.start = function() {
      if (!this.context) {
        return;
      }
      if (this.source) {
        return this.source.start(this.context.currentTime);
      }
    };

    Pitcher.prototype.stop = function() {
      if (!this.oscillator) {
        return;
      }
      this.oscillator.stop(this.context.currentTime);
      return this.oscillator = void 0;
    };

    Pitcher.prototype.toggle = function() {
      if (this.oscillator) {
        return this.stop();
      } else {
        return this.start();
      }
    };

    Pitcher.prototype.setVolume = function(vol) {
      this.volume = vol;
      if (this.gain) {
        return this.gain.gain.value = vol * (1.0 - this.fade);
      }
    };

    Pitcher.prototype.setGain = function(g) {
      this.gainMultiplier = Math.max(Math.min(g, 1.0), 0.0);
      if (this.gain) {
        return this.gain.gain.value = this.volume * this.gainMultiplier;
      }
    };

    return Pitcher;

  })();

}).call(this);
