// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Motion = (function() {
    function Motion(opts) {
      this.update = __bind(this.update, this);
      this.onMotion = __bind(this.onMotion, this);
      this.options = opts || {};
      this.outputel = document.getElementById('output');
      if (this.outputel && this.options.log === true) {
        this.outputel.setAttribute('style', 'display:block;');
      }
      this.radius = 50;
      this.twoEl = document.getElementById('motion-anim');
      this.two = new Two({
        fullscreen: true
      }).appendTo(this.twoEl);
      this.circle = this.two.makeCircle(0, 0, this.radius);
      this.circle.fill = '#FF8000';
      this.circle.stroke = 'orangered';
      this.circle.linewidth = 5;
      this.c = this.two.makeCircle(0, -this.radius - 30, 20);
      this.c.fill = '#0080FF';
      this.c.stroke = 'blue';
      this.c.linewidth = 3;
      this.rotator = this.two.makeGroup(this.c);
      this.scaler = this.two.makeGroup(this.circle, this.rotator);
      this.scaler.translation.set(this.two.width / 2, this.two.height / 2);
      this.orienter = new Orienter();
      console.log(this.two);
      console.log(this.circle);
    }

    Motion.prototype.output = function(msg) {
      this.msgs || (this.msgs = []);
      this.msgs.unshift(msg);
      if (this.msgs.length > 10) {
        this.msgs.pop();
      }
      if (this.outputel && this.options.log === true) {
        return this.outputel.innerHTML = this.msgs.join('\n');
      }
    };

    Motion.prototype.start = function() {
      this.orienter.start();
      this.output("Starting motion sensor...");
      this.two.bind('update', this.update);
      return this.two.play();
    };

    Motion.prototype.onMotion = function(event) {
      if (!this.lastEvent) {
        console.log(event);
      }
      return this.lastEvent = event;
    };

    Motion.prototype.update = function(frameCount) {
      var event;
      event = this.orienter.last();
      if (event) {
        this.rotator.rotation = event.alpha / 180 * Math.PI;
        this.output('Cumulative: ' + this.orienter.cumulative + ' (' + this.orienter.rotationIndex + ')');
        return this.scaler.scale = Math.abs(this.orienter.cumulative / 270);
      }
    };

    return Motion;

  })();

}).call(this);
