// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Motion = (function() {
    function Motion(opts) {
      this.update = __bind(this.update, this);
      this.onOrientation = __bind(this.onOrientation, this);
      this.onMotion = __bind(this.onMotion, this);
      this.options = opts;
      this.outputel = document.getElementById('output');
      this.twoEl = document.getElementById('motion-anim');
      console.log(this.twoEl);
      this.two = new Two({
        fullscreen: true
      }).appendTo(this.twoEl);
      console.log(this.two);
      this.circle = this.two.makeCircle(this.two.width * 0.5, this.two.height * 0.5, 50);
      console.log(this.circle);
      this.circle = this.two.makeCircle(this.two.width * 0.5, this.two.height * 0.5, 50);
      this.circle.fill = '#FF8000';
      this.circle.stroke = 'orangered';
      this.circle.linewidth = 5;
      this.two.update();
      this.c = this.two.makeCircle(this.two.width * 0.5, this.two.height * 0.5 + 30, 20);
      this.c.fill = '#0080FF';
      this.c.stroke = 'blue';
      this.c.linewidth = 5;
    }

    Motion.prototype.output = function(msg) {
      this.msgs || (this.msgs = []);
      this.msgs.unshift(msg);
      if (this.msgs.length > 10) {
        this.msgs.pop();
      }
      if (this.outputel) {
        return this.outputel.innerHTML = this.msgs.join('\n');
      }
    };

    Motion.prototype.start = function() {
      this.output("Starting motion sensor...");
      if (!window.DeviceMotionEvent) {
        this.output("Motion events not supported on this device...");
      } else {
        window.ondevicemotion = this.onMotion;
      }
      if (!window.DeviceOrientationEvent) {
        this.output("Orientation events not supported");
      } else {
        window.addEventListener('deviceorientation', this.onOrientation);
      }
      this.two.bind('update', this.update);
      return this.two.play();
    };

    Motion.prototype.onMotion = function(event) {
      if (!this.lastEvent) {
        console.log(event);
      }
      return this.lastEvent = event;
    };

    Motion.prototype.onOrientation = function(event) {
      if (!this.lastOrientation) {
        console.log(event);
      }
      return this.lastOrientation = event;
    };

    Motion.prototype.update = function(frameCount) {
      if (this.lastOrientation) {
        return this.output('Rot: ' + [this.lastOrientation.alpha, this.lastOrientation.beta, this.lastOrientation.gamma].join(', '));
      }
    };

    return Motion;

  })();

}).call(this);
